# -*- coding: utf-8 -*-
"""try1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k4nYj7osYq2exzyqQhl2niL2lvzy7bjV
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

train = pd.read_csv("train.csv")
test = pd.read_csv("test.csv")

train.shape

test.shape

train.head()

train.info()

# drop colummn
train.drop(columns=["id","emailer_for_promotion","homepage_featured"], inplace=True)

test.drop(columns=["id","emailer_for_promotion","homepage_featured"], inplace=True)

train.head()

test.head()

train.describe()

train.isnull().sum()

train.dropna(inplace=True)

sns.heatmap(train.isnull())
plt.show()

plt.figure(figsize=(20,8))
train.corr()['num_orders'].sort_values(ascending=False).plot(kind='bar')

train.head()

plt.figure(figsize=(20,5))
sns.boxplot(x = "checkout_price",data=train)
plt.show()

plt.figure(figsize=(20,5))
sns.boxplot(x = "base_price",data=train)
plt.show()

plt.figure(figsize=(20,5))
sns.boxplot(x = "num_orders",data=train)
plt.show()

plt.figure(figsize=(10,5))
# plt.xlim(0,1500)
sns.distplot(train["num_orders"])

plt.figure(figsize=(10,5))
plt.xlim(0,1500)
sns.distplot(train["num_orders"])

# removing outliers using IQR method
q1 = train["num_orders"].quantile(0.25)
q3 = train["num_orders"].quantile(0.75)
iqr = q3 - q1

min_r = q1 - (1.5 * iqr)
max_r = q3 + (1.5 * iqr)
min_r,max_r

train.shape

train = train[train["num_orders"] <= max_r]

train.shape

train.describe().T

sns.distplot(train["num_orders"])
plt.show()

# from sklearn.preprocessing import FunctionTransformer

# ft = FunctionTransformer(func=np.log1p)

# ft.fit(train[["num_orders"]])

# train["num_orders_tf"] = ft.transform(train[["num_orders"]])

# plt.figure(figsize=(10,5))
# plt.subplot(1,2,1)
# sns.distplot(train["num_orders"])
# plt.title("Before")

# plt.subplot(1,2,2)
# sns.distplot(train["num_orders_tf"])
# plt.title("After")

# plt.show()

# Separate features and target variable
X_train = train.drop(columns=['num_orders'])
y_train = train['num_orders']

# Features for test data (since there's no num_orders column)
# X_test = test

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split

# Assuming 'num_orders' is the target variable
X = train.drop(columns=['num_orders'])  # Features
y = train['num_orders']  # Target variable

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(random_state=42)

train.head()

train.shape

test.head()

# Example: Check column names
print(X_train.columns)
print(X_test.columns)

model.fit(X_train,y_train)

# Predict on test data
y_pred_test = model.predict(test)
y_pred_test

test.shape

y_pred_test.shape

# Use the score method to evaluate the model on test data
train_score = model.score(X_train, y_train)
test_score = model.score(X_test, y_test)

train_score,test_score

print(f"Train R-squared: {train_score:.2f}")
print(f"Test R-squared: {test_score:.2f}")

def predict_num_orders(week, center_id, meal_id, checkout_price, base_price):

    input_data = pd.DataFrame({
        'week': [week],
        'center_id': [center_id],
        'meal_id': [meal_id],
        'checkout_price': [checkout_price],
        'base_price': [base_price]
    })

    # Make prediction
    prediction = model.predict(input_data)
    return prediction[0]

if __name__ == "__main__":
    week = int(input("Enter week: "))
    center_id = int(input("Enter center_id: "))
    meal_id = int(input("Enter meal_id: "))
    checkout_price = float(input("Enter checkout_price: "))
    base_price = float(input("Enter base_price: "))

    predicted_orders = predict_num_orders(week, center_id, meal_id, checkout_price, base_price)
    print(f"Predicted number of orders: {int(predicted_orders)}")

